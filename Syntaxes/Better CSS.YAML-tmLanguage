# [PackageDev] target_format: plist, ext: tmLanguage
name: Better CSS
scopeName: source.css
fileTypes:
- css
uuid: 5E1320A0-3857-4AB6-8F5F-F7459F347CCF

patterns:
- include: '#comment-block'

- include: '#at-rules'

- include: '#property-list'

- include: '#selectors-group'

repository:
  absolute-size-type:
    name: support.constant.property-value.css
    match: \b(xx-small|x-small|small|medium|large|x-large|xx-large)\b

  accent-color-property:
    begin: \b(accent-color)(?=\s*?:)
    beginCaptures:
      '0': {name: meta.property-name.css}
      '1': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#color-type'
      - name: support.constant.property-value.css
        match: auto
      - include: '#global-property-values'
      - include: '#var-function'

  align-content-property:
    name: support.type.property-name.css
    begin: \balign-content(?=\s*?:)
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (((\+_?)?):)(?=[\s\t]*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#global-property-values'
      - include: '#custom-property-name'
      - include: '#property-values'

  alpha-value-type:
    patterns:
    - name: constant.numeric.alpha.css
      match: \b(?:0|0?(?:\.\d+([eE][+-]?\d+)?)|1(?:\.0+)?)\b
    - include: '#percentage-type'

  angle-percentage-type:
    patterns:
    - include: '#angle-type'
    - include: '#percentage-type'

  angle-type:
    patterns:
    - name: constant.numeric.angle.css
      match: \b({{number_token}})(deg)|(grad)|(rad)|(turn)\b
      captures:
        '1': {name: constant.numeric.css}
        '2': {name: keyword.other.unit.angle.deg.css}
        '3': {name: keyword.other.unit.angle.grad.css}
        '4': {name: keyword.other.unit.angle.rad.css}
        '5': {name: keyword.other.unit.angle.turn.css}

  animation-properties:
    patterns:
    - begin: \banimation-timeline\b
      beginCaptures:
        '0': {name: support.type.property-name.css}
      end: '{{property_value_terminator}}'
      endCaptures:
        '1': {name: punctuation.terminator.rule.css}
      patterns:
      - contentName: meta.property-value.css
        begin: (((\+_?)?):)(?=[\s\t]*)
        beginCaptures:
          '1': {name: punctuation.separator.key-value.css}
        end: (?={{property_value_terminator}})
        patterns:
        - include: '#comment-block'
        - include: '#custom-property-name'
        - include: '#scroll-function'
        - include: '#view-function'
        - include: '#property-values'
        - include: '#arbitrary-repetition'
        - include: '#important'
    - begin: \banimation(?:-name)?(?=(?:\+_?)?:)\b
      beginCaptures:
        '0': {name: support.type.property-name.css}
      end: '{{property_value_terminator}}'
      endCaptures:
        '1': {name: punctuation.terminator.rule.css}
      patterns:
      - contentName: meta.property-value.css
        begin: (((\+_?)?):)(?=[\s\t]*)
        beginCaptures:
          '1': {name: punctuation.separator.key-value.css}
        end: (?={{property_value_terminator}})
        patterns:
        - include: '#comment-block'
        - include: '#builtin-functions'
        - include: '#numeric-values'
        - include: '#property-value-constants'
        - name: variable.other.constant.animation-name.css string.unquoted.css
          match: '{{string_unquoted}}'
        - include: '#arbitrary-repetition'
        - include: '#important'

  arbitrary-repetition:
    match: \s*(?:(,))
    captures:
      '1': {name: punctuation.definition.arbitrary-repetition.css}

  at-charset:
    name: meta.at-rule.charset.css
    begin: (@)(charset)\s
    beginCaptures:
      '1': {name: punctuation.definition.keyword.css}
      '2': {name: keyword.control.at-rule.css}
    end: ;
    endCaptures:
      '0': {name: punctuation.terminator.statement.css}
    patterns:
    - name: string.quoted.double.css
      match: (")[-_+:.0-9a-zA-Z]*(")
      captures:
        '1': {name: punctuation.definition.string.begin.css}
        '2': {name: punctuation.definition.string.end.css}
    - name: invalid.illegal.bad-charset.css
      match: '[^"].*?'

  at-color-profile:
    name: meta.at-rule.color-profile.css
    begin: (?=\s*@color-profile\b)
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - begin: \s*((@)color-profile)
      beginCaptures:
        '1': {name: keyword.control.at-rule.color-profile.css}
        '2': {name: punctuation.definition.keyword.css}
        '3': {name: support.constant.color-profile.css}
      end: \s*(?=\{)
      patterns:
      - include: '#comment-block'
      - name: support.constant.color-profile.css
        match: device-cmyk
      - include: '#custom-property-name'
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#comment-block'
      - include: '#rendering-intent-descriptor'
      - include: '#src-descriptor'

  at-container:
    name: meta.at-rule.container.css
    begin: (@)container\b
    beginCaptures:
      '0': {name: keyword.control.at-rule.container.css}
      '1': {name: punctuation.definition.keyword.css}
    end: \s*(\})
    endCaptures:
      '0': {name: punctuation.definition.block.end.css}
    patterns:
    - include: '#comment-block'
    - begin: (?=[^{;])
      end: (?=\{)
      patterns:
      - include: '#comment-block'
      - name: meta.parens.support-condition.css
        begin: \(
        beginCaptures:
          '0': {name: punctuation.definition.group.begin.css}
        end: \)
        endCaptures:
          '0': {name: punctuation.definition.group.end.css}
        patterns:
        - begin: \baspect-ratio\b
          beginCaptures:
            '0': {name: support.type.property-name.css}
          end: (?=\))
          patterns:
          - include: '#comment-block'
          - include: '#comparison-operator'
          - include: '#ratio-type'
        - begin: \bblock-size|height\b
          beginCaptures:
            '0': {name: support.type.property-name.css}
          end: (?=\))
          patterns:
          - include: '#comment-block'
          - include: '#comparison-operator'
          - include: '#dimension-type'
        - name: support.type.property-name.css
          match: \b(block-size|height|inline-size|orientation|width)\b
        - name: keyword.operator.comparison.css
          match: <=?|>=?|=
        - include: '#comment-block'
        - include: '#dimension-type'
        - include: '#rule-list-body'
      - name: keyword.operator.logical.css
        match: \b(and|or|not)\b
      - name: variable.parameter.container-name.css
        match: '{{ident_token}}'
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: $self

  at-counter-style:
    name: meta.at-rule.counter-style.css
    begin: ((@)counter-style)\s+(?:(disclosure-open|disclosure-closed|disc|decimal|square|circle)|({{ident_token}}))\s*(?=\{|$)
    beginCaptures:
      '1': {name: keyword.control.at-rule.counter-style.css}
      '2': {name: punctuation.definition.keyword.css}
      '3': {name: invalid.illegal.counter-style-name.css}
      '4': {name: variable.parameter.style-name.css}
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - include: '#comment-block'
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#comment-block'
      - include: '#system-descriptor'

  at-import:
    name: meta.at-rule.import.css
    begin: (@)(import)
    beginCaptures:
      '1': {name: punctuation.definition.keyword.css}
      '2': {name: keyword.control.at-rule.import.css}
    end: ;
    endCaptures:
      '0': {name: punctuation.terminator.statement.css}
    patterns:
    - include: '#comment-block'
    - include: '#string'
    - include: '#function-layer'
    - include: '#function-supports'
    - include: '#function-url'
    - name: keyword.context.resource.css
      match: \blayer\s*(?=;)
    - include: '#media-condition'

  at-keyframes:
    name: meta.at-rule.keyframes.css
    begin: (@)keyframes
    beginCaptures:
      '0': {name: keyword.control.at-rule.keyframes.css}
      '1': {name: punctuation.definition.keyword.css}
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - include: '#comment-block'
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#comment-block'
      - name: entity.other.keyframe-offset.css
        match: \b(?:from|to)\b
        captures:
          '0': {name: keyword.other.keyframe-selector.css}
      - name: entity.other.keyframe-offset.percentage.css
        include: '#percentage-type'
      - include: '#arbitrary-repetition'
      - include: $self
    - begin: (?=[^{;])
      end: (?=\{)
      patterns:
      - include: '#comment-block'
      - name: variable.parameter.animation-name.css
        match: '{{ident_token}}'
      - include: '#string'

  at-layer:
    patterns:
    - name: meta.at-rule.layer.css
      begin: (@)(layer)\b(?=.*?;)
      beginCaptures:
        '1': {name: punctuation.definition.keyword.css}
        '2': {name: keyword.control.at-rule.layer.css}
      end: ;
      endCaptures:
        '0': {name: punctuation.terminator.statement.css}
      patterns:
      - include: '#comment-block'
      - name: support.constant.layer-name.css
        match: (?'ident'{{ident_token}})(?:(\.)\g'ident')*
        captures:
          '2': {name: punctuation.accessor.dot.css}
      - name: punctuation.separator.css
        match: ','
    - name: meta.at-rule.layer.css
      begin: (?=@layer\b)
      end: \s*(\})
      endCaptures:
        '1': {name: punctuation.terminator.statement.css}
      patterns:
      - begin: \s*((@)layer)
        beginCaptures:
          '1': {name: keyword.control.at-rule.layer.css}
          '2': {name: punctuation.definition.keyword.css}
        end: \s*(?=\{)
        patterns:
        - include: '#comment-block'
        - captures:
            '2': {name: punctuation.accessor.dot.css}
          match: (?'ident'{{ident_token}})(?:(\.)\g'ident')*
          name: support.constant.layer-name.css
        - match: ','
          name: punctuation.separator.css
      - begin: \s*(\{)
        beginCaptures:
          '1': {name: punctuation.definition.block.begin.css}
        end: (?=\})
        patterns:
        - include: '#comment-block'
        - include: '#property-list'
        - include: '#selectors-group'

  at-namespace:
    name: meta.at-rule.namespace.css
    begin: (@)(namespace)
    beginCaptures:
      '1': {name: punctuation.definition.keyword.css}
      '2': {name: keyword.control.at-rule.css}
    end: ;
    endCaptures:
      '0': {name: punctuation.terminator.statement.css}
    patterns:
    - include: '#comment-block'
    - include: '#string'
    - include: '#function-url'
    - include: '#function-src'
    - name: variable.parameter.namespace-prefix.css
      match: '{{ident_token}}'

  at-property:
    name: meta.at-rule.property.css
    begin: (@)property
    beginCaptures:
      '0': {name: keyword.control.at-rule.css}
      '1': {name: punctuation.definition.keyword.css}
    end: (\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - include: '#comment-block'
    - name: variable.parameter.property-name.css
      match: '{{dashed_ident}}'
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#comment-block'
      - include: '#inherits-descriptor'
      - include: '#initial-value-descriptor'
      - include: '#syntax-descriptor'

  at-rules:
    patterns:
    - include: '#at-charset'
    - include: '#at-color-profile'
    - include: '#at-container'
    - include: '#at-counter-style'
    - include: '#at-font-face'
    - include: '#at-font-feature-values'
    - include: '#at-font-palette-values'
    - include: '#at-import'
    - include: '#at-keyframes'
    - include: '#at-layer'
    - include: '#at-media'
    - include: '#at-namespace'
    - include: '#at-page'
    - include: '#at-position-try'
    - include: '#at-property'
    - include: '#at-scope'
    - include: '#at-starting-style'
    - include: '#at-supports'
    - include: '#at-view-transition'

  at-scope:
    name: meta.at-rule.scope.css
    begin: (@)scope
    beginCaptures:
      '0': {name: keyword.control.at-rule.css}
      '1': {name: punctuation.definition.keyword.css}
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - include: '#comment-block'
    - name: meta.group.scope.css
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.css}
      end: (?=\))
      patterns:
      - include: '#comment-block'
      - include: '#selectors-group'
    - name: punctuation.definition.group.end.css
      match: \)
    - name: keyword.operator.logical.css
      match: \b(to)\b
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#comment-block'
      - include: '#property-list'

  attribute-selector:
    name: meta.attribute-selector.css
    begin: \[
    beginCaptures:
      '0': {name: punctuation.definition.attribute-selector.begin.css}
    end: \]
    endCaptures:
      '0': {name: punctuation.definition.attribute-selector.end.css}
    patterns:
    - include: '#comment-block'
    - include: '#namespace-prefix'
    - name: entity.other.attribute-name.attribute.css
      match: '{{ident_token}}'
    - begin: \s*?([|\^\$*~]?\=)\s*?
      beginCaptures:
        '1': {name: keyword.operator.attribute-match.css}
      end: (?=\])
      patterns:
      - include: '#comment-block'
      - name: support.constant.attribute-case-sensitivity.css
        match: \b[is]\s*(?=\])
      - include: '#string'
      - name: string.unquoted.attribute-value.css
        match: '{{string_unquoted}}'

  backdrop-filter-property:
    name: meta.property-name.css
    begin: \bbackdrop-filter\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - match: (((\+_?)?):)([\s\t]*)
      captures:
        '1': {name: punctuation.separator.key-value.css}
        '4': {name: meta.property-value.css}
    - name: meta.property-value.css
      match: \b(inherit|initial|unset|none)\b
    - include: '#filter-functions'

  blend-mode-type:
    patterns:
    - name: support.constant.blend-mode.css
      match: \b(?:normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity)\b

  border-properties:
    begin: \b(border((-(bottom|top)-(left|right))|((-(start|end)){2}))?-radius|(border-image(?!-)))\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (((\+_?)?):)(?=[\s\t]*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#value-separator'
      - include: '#property-values'

  box-edge-type:
    patterns:
    - include: '#visual-box-type'
    - include: '#layout-box-type'
    - include: '#paint-box-type'
    - include: '#coord-box-type'
    - include: '#geometry-box-type'

  calc-keyword-type:
    name: constant.numeric.calc.css
    match: \b(e|pi|-?infinity|NaN)\b

  calc-product-type:
    patterns:
    - name: keyword.operator.calc.css
      match: '[*/]'
    - include: '#calc-value-type'

  calc-sum-type:
    patterns:
    - name: keyword.operator.calc.css
      match: '[+-]'
    - include: '#calc-product-type'

  calc-value-type:
    patterns:
    - include: '#number-type'
    - include: '#dimension-type'
    - include: '#percentage-type'
    - include: '#calc-keyword-type'
    - begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: '#calc-sum-type'

  class-selector:
    name: entity.other.attribute-name.class.css
    match: (\.)(?:{{ident_token}})
    captures:
      '1': {name: punctuation.definition.entity.css}

  color-base-type:
    patterns:
    - include: '#color-hex-type'
    - include: '#color-function-type'
    - include: '#named-colors'
    - name: constant.other.color.transparent.css
      match: \btransparent\b

  color-function-type:
    patterns:
    - include: '#rgb-function'
    - include: '#hsl-function'
    - include: '#hsla-function'
    - include: '#hwb-function'
    - include: '#lab-function'
    - include: '#lch-function'
    - include: '#oklab-function'
    - include: '#oklch-function'
    - include: '#color-function'

  color-hex-type:
    match: (\#)(?:[0-9a-fA-F]{8}|[0-9a-fA-F]{6}|[0-9a-fA-F]{3,4})
    captures:
      '0': {name: constant.other.color.rgb-value.css}
      '1': {name: punctuation.definition.constant.css}

  color-type:
    patterns:
    - include: '#color-base-type'
    - name: support.constant.property-value.css
      match: \b(currentcolor)\b
    - include: '#system-color-type'
    - include: '#rgb-function'
    - include: '#color-hsl'
    - include: '#color-hwb'
    - include: '#color-lab'
    - include: '#color-lch'
    - include: '#color-xyz'

  comment-block:
    name: comment.block.css
    begin: /\*
    end: \*/
    captures:
      '0': {name: punctuation.definition.comment.css}

  comparison-operator:
    name: keyword.operator.comparison.css
    match: <=?|>=?|=

  container-name-property:
    name: support.type.property-name.css
    begin: \bcontainer(?:-name)?(?=\s*?:)
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (((\+_?)?):)(?=[\s\t]*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - name: invalid.illegal.property-value.css
        match: \bdefault\b
      - include: '#global-property-values'
      - include: '#custom-property-name'
      - name: support.constant.property-value.css variable.other.constant.container-name.css
        match: '{{dashed_ident}}'
      - include: '#property-values'

  coord-box-type:
    patterns:
    - include: '#visual-box-type'
    - name: meta.property-value.css
      match: \b(?:(?:fill|stroke|view)-box)\b
      captures:
        '1': {name: support.constant.property-value.css}

  counter-properties:
    name: meta.property-name.css
    begin: \bcounter-(increment|(re)?set)\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - match: (((\+_?)?):)([\s\t]*)
      captures:
        '1': {name: punctuation.separator.key-value.css}
        '4': {name: meta.property-value.css}
    - name: entity.name.constant.counter-name.css
      match: '{{ident_token}}'
    - include: '#integer-type'
    - name: invalid.illegal.property-value.css
      match: unset|initial|inherit|auto

  custom-property-name:
    name: variable.parameter.custom-property-name.css
    match: '{{dashed_ident}}'

  dimension-type:
    patterns:
    - include: '#length-type'
    - include: '#percentage-type'

  element-name:
    patterns:
    - name: entity.name.tag.css
      match: |-
        (?x)\b( acronym | big | center | dir | font | frameset | frame | marquee
        | nobr | noembed | noframes | param | plaintext | rb | rtc | strike | tt |
        xmp )\b | \b( abbr | address | area | article | aside | audio | a | base |
        bdi | bdo | blockquote | body | br | button | b | canvas | caption | cite
        | code | colgroup | col | datalist | data | dd | del | details | dfn | dialog
        | div | dl | dt | embed | em | fencedframe | fieldset | figcaption | figure
        | footer | form | h1 | h2 | h3 | h4 | h5 | h6 | header | head | hgroup | hr
        | html | iframe | img | input | ins | i | kbd | label | legend | link | li
        | main | map | mark | menu | meta | meter | nav | noscript | object | ol |
        optgroup | option | output | picture | portal | pre | progress | p | q | rp
        | rt | ruby | samp | script | search | section | select | slot | small | source
        | span | strong | style | sub | summary | sup | s | table | tbody | td | template
        | textarea | tfoot | thead | th | time | title | track | tr | ul | u | var
        | video | wbr )\b
      captures:
        '1': {name: invalid.deprecated.css}

  filter-property:
    name: meta.property-name.css
    begin: \bfilter\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - captures:
        '1': {name: punctuation.separator.key-value.css}
        '4': {name: meta.property-value.css}
      match: (((\+_?)?):)([\s\t]*)
    - match: \b(inherit|initial|unset|none)\b
      name: meta.property-value.css
    - include: '#filter-functions'

  font-family-property:
    name: meta.property-name.css
    begin: \bfont(-family)?(?!-)\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - match: (((\+_?)?):)([\s\t]*)
      captures:
        '1': {name: punctuation.separator.key-value.css}
        '4': {name: meta.property-value.css}
    - include: '#property-values'
    - name: string.unquoted.css
      match: '{{string_unquoted}}'
    - name: punctuation.separator.css
      match: ','

  font-properties:
    patterns:
    - include: '#font-family-property'
    - include: '#font-size-adjust-property'
    - include: '#font-size-property'

  font-size-adjust-property:
    name: meta.property-name.css
    begin: \bfont-size-adjust\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (:)(?=\s*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - name: support.constant.property-value.css
        match: \b(none|ex-height|cap-height|ch-width|ic-width|ic-height|from-font)\s*?\b
      - include: '#number-type'
      - include: '#var-function'
      - include: '#global-property-values'

  font-size-property:
    begin: \b(font-size)\b
    beginCaptures:
      '0': {name: meta.property-name.css}
      '1': {name: support.type.property-name.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (:)(?=\s*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#absolute-size-type'
      - include: '#relative-size-type'
      - include: '#length-percentage-type'
      - include: '#var-function'
      - include: '#global-property-values'

  function-layer:
    comment: layer()
    name: meta.function-call.layer.css
    begin: \b(layer)(\()
    beginCaptures:
      '1': {name: support.function.layer.css}
      '2': {name: punctuation.definition.group.begin.css}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.group.end.css}
    patterns:
    - include: '#comment-block'
    - name: support.constant.layer-name.css
      match: (?'ident'{{ident_token}})(?:(\.)\g'ident')*
      captures:
        '2': {name: punctuation.accessor.dot.css}

  function-src:
    comment: url("quoted" modifier)
    name: meta.function-call.src.css
    begin: \b(src)(\()
    beginCaptures:
      '1': {name: support.function.src.css}
      '2': {name: punctuation.definition.group.begin.css}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.group.end.css}
    patterns:
    - include: '#comment-block'
    - include: '#string'
    - name: variable.parameter.url-modifier.css
      match: '{{ident_token}}'

  function-supports:
    comment: supports()
    name: meta.function-call.supports.css
    begin: \b(supports)(\()
    beginCaptures:
      '1': {name: support.function.supports.css}
      '2': {name: punctuation.definition.group.begin.css}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.group.end.css}
    patterns:
    - include: '#comment-block'
    - include: '#supports-condition'

  function-url:
    patterns:
    - comment: url("quoted" modifier)
      name: meta.function-call.url.css
      begin: \b(url)(\()
      beginCaptures:
        '1': {name: support.function.url.css}
        '2': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: '#comment-block'
      - include: '#string'
      - match: '{{ident_token}}'
        name: variable.parameter.url-modifier.css
    - comment: url(unquoted)
      name: meta.function-call.css
      match: \b(url)(\()({{ws}})({{string_unquoted}})({{ws}})(\))
      captures:
        '1': {name: support.function.url.css}
        '2': {name: punctuation.definition.group.begin.css}
        '4': {name: string.unquoted.url.css}
        '6': {name: punctuation.definition.group.end.css}

  geometry-box-type:
    patterns:
    - include: '#shape-box-type'
    - name: meta.property-value.css
      match: \b(?:(?:fill|stroke|view)-box)\b
      captures:
        '1': {name: support.constant.property-value.css}

  global-property-values:
    name: support.constant.property-value.css
    match: \b(?:inherit|initial|revert-layer|revert|unset)\b

  hsl-function:
    patterns:
    - name: meta.function-call.hsl.css
      contentName: meta.function-call.arguments.css meta.group.css
      begin: \b(hsla?)(\()
      beginCaptures:
        '1': {name: support.function.hsl.css}
        '2': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
        - include: '#comment-block'
        - match: '/'
          name: punctuation.separator.css
        - name: constant.other.color.rgb-value.css
          match: \bnone\b
        - include: '#hue-type'
        - include: '#percentage-type'
        - include: '#comma-separator'
        - include: '#alpha-value-type'

  hue-type:
    patterns:
    - include: '#number-type'
    - include: '#angle-type'

  id-selector:
    name: entity.other.attribute-name.id.css
    match: (#)(?:{{ident_token}})
    captures:
      '1': {name: punctuation.definition.entity.css}

  important:
    name: keyword.other.important.css
    match: (\!)\s*important
    captures:
      '1': {name: punctuation.separator.css}

  inherits-descriptor:
    begin: \binherits\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - include: '#comment-block'
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#comment-block'
      - name: support.constant.property-value.css
        match: true|false

  initial-value-descriptor:
    begin: \binitial-value\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - include: '#comment-block'
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#property-value'

  integer-type:
    name: constant.numeric.css
    match: (?:[-+]?\d+)

  layout-box-type:
    patterns:
    - include: '#visual-box-type'
    - name: meta.property-value.css
      match: \b(?:margin-box)\b
      captures:
        '1': {name: support.constant.property-value.css}

  length-percentage-type:
    patterns:
    - include: '#length-type'
    - include: '#percentage-type'

  length-type:
    name: meta.number.integer.decimal.css
    match: (?x)({{number_token}})(?:(cap) | (ch) | (em) | (ex) | (ic) | (lh) | (rcap)
      | (rch)| (rem) | (rex) | (ric) | (rlh) | (svh) | (svw) | (svmax) | (svmin) |
      (svb) | (svi) | (lvh) | (lvw) | (lvmax) | (lvmin) | (lvb) | (lvi) | (dvh) |
      (dvw) | (dvmax) | (dvmin) | (dvb) | (dvi) |(vh) | (vw) | (vmax) | (vmin) | (vb)
      | (vi) | (cqw) | (cqh) | (cqi) | (cqb) | (cqmin) | (cqmax) | (px) | (cm) | (mm)
      | (Q) | (in) | (pc) | (pt) )?
    captures:
      '1': {name: constant.numeric.css}
      '2': {name: keyword.other.unit.length.cap.css}
      '3': {name: keyword.other.unit.length.ch.css}
      '4': {name: keyword.other.unit.length.em.css}
      '5': {name: keyword.other.unit.length.ex.css}
      '6': {name: keyword.other.unit.length.ic.css}
      '7': {name: keyword.other.unit.length.lh.css}
      '8': {name: keyword.other.unit.length.rcap.css}
      '9': {name: keyword.other.unit.length.rch.css}
      '10': {name: keyword.other.unit.length.rem.css}
      '11': {name: keyword.other.unit.length.rex.css}
      '12': {name: keyword.other.unit.length.ric.css}
      '13': {name: keyword.other.unit.length.rlh.css}
      '14': {name: keyword.other.unit.length.svh.css}
      '15': {name: keyword.other.unit.length.svw.css}
      '16': {name: keyword.other.unit.length.svmax.css}
      '17': {name: keyword.other.unit.length.svmin.css}
      '18': {name: keyword.other.unit.length.svb.css}
      '19': {name: keyword.other.unit.length.svi.css}
      '20': {name: keyword.other.unit.length.lvh.css}
      '21': {name: keyword.other.unit.length.lvw.css}
      '22': {name: keyword.other.unit.length.lvmax.css}
      '23': {name: keyword.other.unit.length.lvmin.css}
      '24': {name: keyword.other.unit.length.lvb.css}
      '25': {name: keyword.other.unit.length.lvi.css}
      '26': {name: keyword.other.unit.length.dvh.css}
      '27': {name: keyword.other.unit.length.dvw.css}
      '28': {name: keyword.other.unit.length.dvmax.css}
      '29': {name: keyword.other.unit.length.dvmin.css}
      '30': {name: keyword.other.unit.length.dvb.css}
      '31': {name: keyword.other.unit.length.dvi.css}
      '32': {name: keyword.other.unit.length.vh.css}
      '33': {name: keyword.other.unit.length.vw.css}
      '34': {name: keyword.other.unit.length.vmax.css}
      '35': {name: keyword.other.unit.length.vmin.css}
      '36': {name: keyword.other.unit.length.vb.css}
      '37': {name: keyword.other.unit.length.vi.css}
      '38': {name: keyword.other.unit.length.cqw.css}
      '39': {name: keyword.other.unit.length.cqh.css}
      '40': {name: keyword.other.unit.length.cqi.css}
      '41': {name: keyword.other.unit.length.cqb.css}
      '42': {name: keyword.other.unit.length.cqmin.css}
      '43': {name: keyword.other.unit.length.cqmax.css}
      '44': {name: keyword.other.unit.length.px.css}
      '45': {name: keyword.other.unit.length.cm.css}
      '46': {name: keyword.other.unit.length.mm.css}
      '47': {name: keyword.other.unit.length.Q.css}
      '48': {name: keyword.other.unit.length.in.css}
      '49': {name: keyword.other.unit.length.pc.css}
      '50': {name: keyword.other.unit.length.pt.css}

  media-condition:
    patterns:
    - name: meta.parens.support-condition.css
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: '#comment-block'
      - include: $self
    - name: keyword.operator.logical.css
      match: \b(and|or|not)\b
    - include: '#media-feature'

  media-feature:
    patterns:
    - name: support.constant.media-feature.css
      begin: '({{ident_token}}){{ws}}(:)'
      beginCaptures:
        '1': {name: support.type.media-feature.name.css}
        '2': {name: punctuation.separator.key-value.css}
      end: (?=\))
      patterns:
      - include: '#comment-block'
      - name: constant.numeric.media-feature.css
        match: '{{number_token}}'

  namespace-prefix:
    patterns:
    - name: entity.name.tag.namespace.css
      match: (?:\*|(?:{{ident_token}}))?(\|(?!=))
      captures:
        '1': {name: punctuation.separator.namespace.css}
    - include: '#element-name'

  number-type:
    name: constant.numeric.css
    match: '{{number_token}}'

  paint-box-type:
    patterns:
    - include: '#visual-box-type'
    - name: meta.property-value.css
      match: \b(?:(?:fill|stroke)-box)\b
      captures:
        '1': {name: support.constant.property-value.css}

  percentage-type:
    name: constant.numeric.css
    match: '{{number_token}}(%)'
    captures:
      '1': {name: keyword.other.unit.percentage.css}

  property-list:
    patterns:
    - begin: (?=(?=[^;]*)\{)
      end: \}
      endCaptures:
        '0': {name: punctuation.definition.block.end.css}
      patterns:
      - include: '#comment-block'
      - include: '#rule-list'

  property-value:
    patterns:
    - include: '#string'
    - comment: common values
      name: support.constant.property-value.css
      match: \b(?:auto|none|normal)\b
    - include: '#comment-block'
    - include: '#important'

  ratio-type:
    name: constant.numeric.value.css
    match: '{{number_token}}\s*(/)\s*({{number_token}})?'
    captures:
      '1': {name: punctuation.separator.css}
      '3': {name: constant.numeric.value.css}

  relative-size-type:
    name: constant.other.relative-size.css
    match: \b(?:larger|smaller)\b

  rendering-intent-descriptor:
    begin: \brendering-intent\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - include: '#comment-block'
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#comment-block'
      - name: support.constant.property-value.css
        match: auto|perceptual|relative-colorimetric|saturation|absolute-colorimetric

  rgb-function:
    patterns:
    - name: meta.function-call.rgb.css
      contentName: meta.function-call.arguments.css meta.group.css
      begin: \b(rgba?)(\()
      beginCaptures:
        '1': {name: support.function.rgb.css}
        '2': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: '#comment-block'
      - match: '/'
        name: punctuation.separator.css
      - name: constant.other.color.rgb-value.css
        match: \bnone\b
      - include: '#percentage-type'
      - include: '#number-type'
      - include: '#comma-separator'
      - include: '#alpha-value-type'

  rule-list:
    patterns:
    - name: meta.property-list.css
      contentName: meta.block.css
      begin: \{
      beginCaptures:
        '0': {name: punctuation.definition.block.begin.css}
      end: (?=\s*\})
      patterns:
      - include: '#comment-block'
      - match: '{{property_value_terminator}}'
        captures:
          '1': {name: punctuation.terminator.rule.css}
      - include: '#rule-list-body'

  rule-list-body:
    patterns:
    - include: '#comment-block'
    - begin: (?=[-a-z])
      end: $|(?![-a-z])
      patterns:
      - include: '#custom-property-name'
      - include: '#vendor-prefixed-property'
      - include: '#accent-color-property'
      - include: '#animation-properties'
      - include: '#backdrop-filter-property'
      - include: '#border-properties'
      - include: '#container-name-property'
      - include: '#counter-properties'
      - include: '#filter-property'
      - include: '#font-properties'
      - include: '#transition-properties'
      - include: '#will-change-property'
      - include: $self
    - contentName: meta.property-value.css
      begin: \b(:)(?:{{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
        '2': {name: meta.property-value.css}
      end: '{{property_value_terminator}}'
      endCaptures:
        '1': {name: punctuation.terminator.rule.css}
      captures:
        '1': {name: punctuation.separator.key-value.css}
        '4': {name: meta.property-value.css}
      patterns:
      - include: '#property-values'
    - include: $self

  selectors-group:
    patterns:
    - include: '#namespace-prefix'
    - include: '#element-name'
    - include: '#id-selector'
    - include: '#class-selector'
    - include: '#universal-selector'
    - include: '#attribute-selector'
    - name: keyword.operator.combinator.css
      match: '[+>~]'
    - name: punctuation.separator.selector.css
      match: ','

  shape-box-type:
    include: '#layout-box-type'

  src-descriptor:
    begin: \bsrc\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - include: '#comment-block'
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#comment-block'
      - include: '#function-src'
      - include: '#function-url'

  string:
    patterns:
    - comment: '"double quoted string"'
      name: string.quoted.double.css
      match: (")(?:(?:[^"\\]|\N)|(?:{{escape}})|\\\n)*?(")
      captures:
        '1': {name: punctuation.definition.string.begin.css}
        '2': {name: punctuation.definition.string.end.css}
    - comment: '''single quoted string'''
      name: string.quoted.single.css
      match: (')(?:(?:[^"\\]|\N)|{{escape}}|\\\n)*?(\1)
      captures:
        '1': {name: punctuation.definition.string.begin.css}
        '2': {name: punctuation.definition.string.end.css}

  supports-condition:
    patterns:
    - name: meta.parens.support-condition.css
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: $self
    - name: meta.supports-condition.css
      match: \b(and|or|not)\b
      captures:
        '0': {name: keyword.operator.logical.css}

  syntax-descriptor:
    begin: \bsyntax\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - include: '#comment-block'
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#comment-block'
      - include: '#string'

  system-color-type:
    patterns:
    - name: support.constant.property-value.css
      match: \b(?:AccentColor|Canvas|Field|Highlight|Mark|SelectedItem)(?:Text)?\b
    - name: support.constant.property-value.css
      match: \b(?:Active|Button|Gray|Link|Visited)Text\b
    - name: support.constant.property-value.css
      match: \b(?:Button(?:Border|Face))\b

  system-descriptor:
    begin: \bsystem\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - include: '#comment-block'
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#comment-block'
      - include: '#integer-type'
      - include: '#property-value'
      - name: support.constant.property-value.css
        match: cyclic|numeric|alphabetic|symbolic|additive|fixed|extends
      - name: variable.parameter.style-name.css
        match: '{{ident_token}}'

  transition-properties:
    patterns:
    - begin: \b(transition(-(property|duration|delay|timing-function))?)\b
      beginCaptures:
        '1': {name: support.type.property-name.css}
      end: '{{property_value_terminator}}'
      endCaptures:
        '1': {name: punctuation.terminator.rule.css}
      patterns:
      - contentName: meta.property-value.css
        begin: (((\+_?)?):)(?=[\s\t]*)
        beginCaptures:
          '1': {name: punctuation.separator.key-value.css}
        end: (?={{property_value_terminator}})
        patterns:
        - include: '#time-type'
        - include: '#property-values'
        - include: '#cubic-bezier-function'
        - include: '#steps-function'
        - include: '#arbitrary-repetition'

  universal-selector:
    name: entity.name.tag.universal.css
    match: \*

  value-separator:
    match: \s*(/)\s*
    captures:
      '1': {name: punctuation.separator.css}

  vendor-prefixed-property:
    begin: (-[\w-]+?-)((?:-?(?:(?:[a-zA-Z_]|{{non_ascii}})|{{escape}}))(?:(?:[-\da-zA-Z_]|{{non_ascii}})|{{escape}})*)\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
      '1': {name: meta.namespace.vendor-prefix.css}
    end: '{{property_value_terminator}}'
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (((\+_?)?):)(?=[\s\t]*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?={{property_value_terminator}})
      patterns:
      - include: '#property-values'
      - name: support.constant.property-value.css
        match: '[\w-]+'

  visual-box-type:
    name: meta.property-value.css
    match: \b((?:content|padding|border)-box)\b
    captures:
      '1': {name: support.constant.property-value.css}

  width-properties:
    patterns:
    - name: meta.property-name.css
      begin: \bwill-change\b
      beginCaptures:
        '0': {name: support.type.property-name.css}
      end: '{{property_value_terminator}}'
      endCaptures:
        '1': {name: punctuation.terminator.rule.css}
      patterns:
      - match: (((\+_?)?):)([\s\t]*)
        captures:
          '1': {name: punctuation.separator.key-value.css}
          '4': {name: meta.property-value.css}
      - name: invalid.illegal.property-value.css
        match: auto|min-content|max-content|fit-content
      - name: support.constant.property-value.css
        match: '{{dashed_ident}}'

  will-change-property:
    patterns:
    - name: meta.property-name.css
      begin: \bwill-change\b
      beginCaptures:
        '0': {name: support.type.property-name.css}
      end: '{{property_value_terminator}}'
      endCaptures:
        '1': {name: punctuation.terminator.rule.css}
      patterns:
      - match: (((\+_?)?):)([\s\t]*)
        captures:
          '1': {name: punctuation.separator.key-value.css}
          '4': {name: meta.property-value.css}
      - name: invalid.illegal.property-value.css
        match: unset|initial|inherit|will-change|auto|scroll-position|contents
      - name: support.constant.property-value.css
        match: '{{dashed_ident}}'
      - include: '#arbitrary-repetition'
foldingStartMarker: /\*\*(?!\*)|\{\s*($|/\*(?!.*?\*/.*\S))
foldingStopMarker: (?<!\*)\*\*/|^\s*\}
keyEquivalent: ^~L
variables:
  dashed_ident: --(?:(?:[a-zA-Z_\d-]|{{non_ascii}})|{{escape}})*
  escape: (?:\\(?:\N|[[:^xdigit:]]|[[:xdigit:]]{1,6}{{whitespace}}))
  ident_token: --|(?:-?(?:(?:[a-zA-Z_]|{{non_ascii}})|{{escape}}))(?:(?:[-\da-zA-Z_]|{{non_ascii}})|{{escape}})*
  non_ascii: '[\x{00B7}\x{00C0}-\x{00D6}\x{00D8}-\x{00F6}\x{00F8}-\x{037D}\x{037F}-\x{1FFF}\x{200C}\x{200D}\x{203F}\x{2040}\x{2070}-\x{218F}\x{2C00}-\x{2FEF}\x{3001}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFFD}\x{10000}-\x{EFFFF}]'
  number_token: (?:[-+]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][-+]?\d+)?)
  property_value_terminator: \s*(;)|(?=[})])
  string_unquoted: (?:(?:[^"'\(\)]|\S|[^\x{0000}-\x{0008}\x{000B}\x{000E}-\x{001F}\x{007F}])|{{escape}})*?
  vendor_prefix: -(?:moz|ms|o|webkit)-
  whitespace: '[\s\R]'
  whitespace_token: (?:{{whitespace}}+)
  ws: (?:{{whitespace_token}}*?)
