# [PackageDev] target_format: plist, ext: tmLanguage
name: Better CSS
scopeName: source.css
fileTypes:
- css
uuid: 5E1320A0-3857-4AB6-8F5F-F7459F347CCF

patterns:
- include: '#comment-block'

- include: '#at-charset'

- include: '#at-color-profile'

- include: '#at-counter-style'

- include: '#at-import'

- include: '#at-keyframes'

- include: '#property-list'

- include: '#selector'

variables:
  escape: (?:\\(?:\N|[[:^xdigit:]]|[[:xdigit:]]{1,6}{{whitespace}}))
  whitespace: '[\s\R]'
  whitespace_token: (?:{{whitespace}}+)
  ws: (?:{{whitespace_token}}*?)
  non_ascii: '[\x{00B7}\x{00C0}-\x{00D6}\x{00D8}-\x{00F6}\x{00F8}-\x{037D}\x{037F}-\x{1FFF}\x{200C}\x{200D}\x{203F}\x{2040}\x{2070}-\x{218F}\x{2C00}-\x{2FEF}\x{3001}-\x{D7FF}\x{F900}-\x{FDCF}\x{FDF0}-\x{FFFD}\x{10000}-\x{EFFFF}]'
  ident_token: --|(?:-?(?:(?:[a-zA-Z_]|{{non_ascii}})|{{escape}}))(?:(?:[-\da-zA-Z_]|{{non_ascii}})|{{escape}})*
  dashed_ident: --(?:(?:[a-zA-Z_\d-]|{{non_ascii}})|{{escape}})*
  string_unquoted: (?:(?:[^"'\(\)]|\S|[^\x{0000}-\x{0008}\x{000B}\x{000E}-\x{001F}\x{007F}])|{{escape}})*?
  number_token: (?:[-+]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][-+]?\d+)?)
  vendor_prefix: '-(?:moz|ms|o|webkit)-'

repository:
  arbitrary-repetition:
    match: \s*(?:(,))
    captures:
      '1': {name: punctuation.definition.arbitrary-repetition.css}

  at-charset:
    name: meta.at-rule.charset.css
    begin: (@)(charset)\s
    beginCaptures:
      '1': {name: punctuation.definition.keyword.css}
      '2': {name: keyword.control.at-rule.css}
    end: ;
    endCaptures:
      '0': {name: punctuation.terminator.statement.css}
    patterns:
    - name: string.quoted.double.css
      match: (")[-_+:.0-9a-zA-Z]*(")
      captures:
        '1': {name: punctuation.definition.string.begin.css}
        '2': {name: punctuation.definition.string.end.css}
    - name: invalid.illegal.bad-charset.css
      match: '[^"].*?'

  at-color-profile:
    name: meta.at-rule.color-profile.css
    begin: (?=\s*@color-profile\b)
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - name: meta.at-rule.color-profile.css
      begin: \s*((@)color-profile)
      beginCaptures:
        '1': {name: keyword.control.at-rule.color-profile.css}
        '2': {name: punctuation.definition.keyword.css}
        '3': {name: support.constant.color-profile.css}
      end: \s*(?=\{)
      patterns:
      - name: support.constant.color-profile.css
        match: device-cmyk
      - name: variable.other.constant.color-profile.css
        match: '{{dashed_ident}}'
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#rule-list-body'

  at-counter-style:
    name: meta.at-rule.counter-style.css
    begin: ((@)counter-style)\s+(?:(disclosure-open|disclosure-closed|disc|decimal|square|circle)|({{ident_token}}))\s*(?=\{|$)
    beginCaptures:
      '1': {name: keyword.control.at-rule.counter-style.css}
      '2': {name: punctuation.definition.keyword.css}
      '3': {name: invalid.illegal.counter-style-name.css}
      '4': {name: variable.parameter.style-name.css}
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - include: '#comment-block'
      - include: '#rule-list-body'

  at-import:
    name: meta.at-rule.import.css
    begin: (@)(import)
    beginCaptures:
      '1': {name: punctuation.definition.keyword.css}
      '2': {name: keyword.control.at-rule.import.css}
    end: ;
    endCaptures:
      '0': {name: punctuation.terminator.statement.css}
    patterns:
    - include: '#string'
    - include: '#function-layer'
    - include: '#function-supports'
    - include: '#function-url'
    - match: \blayer\s*(?=;)
      name: keyword.context.resource.css
    - include: '#media-condition'

  at-keyframes:
    name: meta.at-rule.keyframes.css
    begin: (@)({{vendor_prefix}})?(keyframes)
    beginCaptures:
      '0': {name: keyword.control.at-rule.keyframe.css}
      '1': {name: punctuation.definition.keyword.css}
      '2': {name: support.type.property-vendor.css}
      '3': {name: keyword.control.at-rule.keyframe.css}
    end: \s*(\})
    endCaptures:
      '1': {name: punctuation.definition.block.end.css}
    patterns:
    - begin: \s*(\{)
      beginCaptures:
        '1': {name: punctuation.definition.block.begin.css}
      end: (?=\})
      patterns:
      - name: entity.other.keyframe-offset.css
        match: \b(?:from|to)\b
        captures:
          '0': {name: keyword.other.keyframe-selector.css}
      - name: entity.other.keyframe-offset.percentage.css
        include: '#percentage-type'
      - include: '#arbitrary-repetition'
      - include: $self
    - begin: (?=[^{;])
      end: (?=\{)
      patterns:
      - name: variable.parameter.animation-name.css
        include: '#ident-token'
      - include: '#string'
      - include: '#comment-block'

  ident-token:
    match: '{{ident_token}}'
  comment-block:
    name: comment.block.css
    begin: /\*
    end: \*/
    captures:
      '0': {name: punctuation.definition.comment.css}
  percentage-type:
    name: constant.numeric.css
    match: '{{number_token}}(%)'
    captures:
      '1': {name: keyword.other.unit.percentage.css}

  function-layer:
    comment: 'layer()'
    name: meta.function-call.layer.css
    begin: \b(layer)(\()
    beginCaptures:
      '1': {name: support.function.layer.css}
      '2': {name: punctuation.definition.group.begin.css}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.group.end.css}
    patterns:
    - match: (?'ident'{{ident_token}})(?:(\.)\g'ident')*
      name: support.constant.layer-name.css
      captures:
        '2': {name: punctuation.accessor.dot.css}

  function-supports:
    comment: 'supports()'
    name: meta.function-call.supports.css
    begin: \b(supports)(\()
    beginCaptures:
      '1': {name: support.function.supports.css}
      '2': {name: punctuation.definition.group.begin.css}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.group.end.css}
    patterns:
    - include: '#supports-condition'
    # TODO: Add property list

  function-src:
    comment: 'url("quoted" modifier)'
    name: meta.function-call.src.css
    begin: \b(src)(\()
    beginCaptures:
      '1': {name: support.function.src.css}
      '2': {name: punctuation.definition.group.begin.css}
    end: \)
    endCaptures:
      '0': {name: punctuation.definition.group.end.css}
    patterns:
    - include: '#string'
    - match: '{{ident_token}}'
      name: variable.parameter.url-modifier.css

  function-url:
    patterns:
    - comment: 'url("quoted" modifier)'
      name: meta.function-call.url.css
      begin: \b(url)(\()
      beginCaptures:
        '1': {name: support.function.url.css}
        '2': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: '#string'
      - match: '{{ident_token}}'
        name: variable.parameter.url-modifier.css
    - comment: 'url(unquoted)'
      name: meta.function-call.css
      match: \b(url)(\()({{ws}})({{string_unquoted}})({{ws}})(\))
      captures:
        '1': {name: support.function.url.css}
        '2': {name: punctuation.definition.group.begin.css}
        '4': {name: string.unquoted.url.css}
        '6': {name: punctuation.definition.group.end.css}

  integer-type:
    name: constant.numeric.css
    match: (?:[-+]?\d+)

  media-condition:
    patterns:
    - name: meta.parens.support-condition.css
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: $self
      # TODO: Add property list
    - match: \b(and|or|not)\b
      name: keyword.operator.logical.css
    - include: '#media-feature'

  media-feature:
    patterns:
    - name: support.constant.media-feature.css
      begin: '({{ident_token}}){{ws}}(:)'
      beginCaptures:
        '1': {name: support.type.media-feature.name.css}
        '2': {name: punctuation.separator.key-value.css}
      end: (?=\))
      patterns:
      - name: constant.numeric.media-feature.css
        match: '{{number_token}}'

  rule-list-body:
    patterns:
    - include: '#system-descriptor'

  system-descriptor:
    begin: \bsystem\b
    beginCaptures:
      '0': {name: support.type.property-name.css}
    end: \s*(;)|(?=\})
    endCaptures:
      '1': {name: punctuation.terminator.rule.css}
    patterns:
    - contentName: meta.property-value.css
      begin: (:)(?={{ws}}*)
      beginCaptures:
        '1': {name: punctuation.separator.key-value.css}
      end: (?=\s*(;)|(?=[})]))
      patterns:
      - include: '#integer-type'
      - include: '#property-value'
      - name: support.constant.property-value.css
        match: cyclic|numeric|alphabetic|symbolic|additive|fixed|extends
      - name: variable.parameter.style-name.css
        match: '\b{{ident_token}}\b'

  string:
    patterns:
    - comment: '"double quoted string"'
      name: string.quoted.double.css
      match: (")(?:(?:[^"\\]|\N)|(?:{{escape}})|\\\n)*?(")
      captures:
        '1': {name: punctuation.definition.string.begin.css}
        '2': {name: punctuation.definition.string.end.css}
    - comment: "'single quoted string'"
      name: string.quoted.single.css
      match: (')(?:(?:[^"\\]|\N)|{{escape}}|\\\n)*?(\1)
      captures:
        '1': {name: punctuation.definition.string.begin.css}
        '2': {name: punctuation.definition.string.end.css}

  supports-condition:
    patterns:
    - name: meta.parens.support-condition.css
      begin: \(
      beginCaptures:
        '0': {name: punctuation.definition.group.begin.css}
      end: \)
      endCaptures:
        '0': {name: punctuation.definition.group.end.css}
      patterns:
      - include: $self
    - name: meta.supports-condition.css
      match: \b(and|or|not)\b
      captures:
        '0': {name: keyword.operator.logical.css}

foldingStartMarker: /\*\*(?!\*)|\{\s*($|/\*(?!.*?\*/.*\S))
foldingStopMarker: (?<!\*)\*\*/|^\s*\}
keyEquivalent: ^~L
